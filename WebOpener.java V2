import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.net.URI;
import java.util.HashMap;
import java.util.prefs.Preferences;

public class WebOpener {
    // Preferences for saving user settings
    private static Preferences prefs = Preferences.userNodeForPackage(WebOpener.class);
    
    // HashMap to store hotkey-URL pairs
    private static HashMap<String, String> hotkeyMap = new HashMap<>();
    
    public static void main(String[] args) {
        // Load stored hotkeys from preferences
        loadPreferences();

        // Start GUI
        SwingUtilities.invokeLater(WebOpener::createMainMenu);

        // Start listening for hotkeys
        startHotkeyListener();
    }

    /**
     * Creates the main menu window
     */
    private static void createMainMenu() {
        JFrame frame = new JFrame("Web Opener");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(300, 200);
        frame.setLayout(new FlowLayout());

        JLabel label = new JLabel("Press assigned hotkeys to open webpages!");
        JButton settingsButton = new JButton("Settings");

        settingsButton.addActionListener(e -> createSettingsMenu());

        frame.add(label);
        frame.add(settingsButton);
        frame.setVisible(true);
    }

    /**
     * Creates the settings menu where users can assign multiple hotkeys to URLs
     */
    private static void createSettingsMenu() {
        JFrame settingsFrame = new JFrame("Settings");
        settingsFrame.setSize(400, 300);
        settingsFrame.setLayout(new BorderLayout());

        JPanel panel = new JPanel(new GridLayout(0, 3, 5, 5));

        // Dropdown for selecting hotkey
        String[] hotkeys = {"F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10"};
        JComboBox<String> hotkeyBox = new JComboBox<>(hotkeys);
        JTextField urlField = new JTextField("https://");
        JButton addButton = new JButton("Add");

        addButton.addActionListener(e -> {
            String selectedHotkey = (String) hotkeyBox.getSelectedItem();
            String url = urlField.getText();
            if (!url.isEmpty()) {
                hotkeyMap.put(selectedHotkey, url);
                savePreferences();
                settingsFrame.dispose();
                createSettingsMenu(); // Refresh the settings menu
            }
        });

        panel.add(new JLabel("Hotkey:"));
        panel.add(hotkeyBox);
        panel.add(new JLabel()); // Empty cell
        panel.add(new JLabel("URL:"));
        panel.add(urlField);
        panel.add(addButton);

        // Display existing hotkey mappings with remove buttons
        for (String hotkey : hotkeyMap.keySet()) {
            JTextField urlText = new JTextField(hotkeyMap.get(hotkey));
            urlText.setEditable(false);
            JButton removeButton = new JButton("Remove");

            removeButton.addActionListener(e -> {
                hotkeyMap.remove(hotkey);
                savePreferences();
                settingsFrame.dispose();
                createSettingsMenu(); // Refresh settings menu
            });

            panel.add(new JLabel(hotkey));
            panel.add(urlText);
            panel.add(removeButton);
        }

        settingsFrame.add(panel, BorderLayout.CENTER);
        settingsFrame.setVisible(true);
    }

    /**
     * Starts the hotkey listener in a separate thread
     */
    private static void startHotkeyListener() {
        new Thread(() -> {
            try {
                Robot robot = new Robot();
                while (true) {
                    for (String hotkey : hotkeyMap.keySet()) {
                        int keyCode = getKeyCode(hotkey);
                        if (keyCode != -1 && Toolkit.getDefaultToolkit().getLockingKeyState(keyCode)) {
                            openWebpage(hotkeyMap.get(hotkey));
                            Thread.sleep(500); // Prevent multiple triggers
                        }
                    }
                    Thread.sleep(100);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
    }

    /**
     * Converts a function key name (e.g., "F9") into its Java KeyEvent code
     */
    private static int getKeyCode(String hotkey) {
        switch (hotkey) {
            case "F1": return KeyEvent.VK_F1;
            case "F2": return KeyEvent.VK_F2;
            case "F3": return KeyEvent.VK_F3;
            case "F4": return KeyEvent.VK_F4;
            case "F5": return KeyEvent.VK_F5;
            case "F6": return KeyEvent.VK_F6;
            case "F7": return KeyEvent.VK_F7;
            case "F8": return KeyEvent.VK_F8;
            case "F9": return KeyEvent.VK_F9;
            case "F10": return KeyEvent.VK_F10;
            default: return -1;
        }
    }

    /**
     * Opens a webpage in the default browser
     */
    private static void openWebpage(String url) {
        try {
            Desktop.getDesktop().browse(URI.create(url));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Saves the hotkey-URL mappings to persistent storage
     */
    private static void savePreferences() {
        prefs.put("hotkeys", String.join(";", hotkeyMap.keySet()));
        for (String hotkey : hotkeyMap.keySet()) {
            prefs.put("url_" + hotkey, hotkeyMap.get(hotkey));
        }
    }

    /**
     * Loads saved hotkey-URL mappings from persistent storage
     */
    private static void loadPreferences() {
        hotkeyMap.clear();
        String savedHotkeys = prefs.get("hotkeys", "");
        if (!savedHotkeys.isEmpty()) {
            String[] keys = savedHotkeys.split(";");
            for (String hotkey : keys) {
                String url = prefs.get("url_" + hotkey, "");
                if (!url.isEmpty()) {
                    hotkeyMap.put(hotkey, url);
                }
            }
        }
    }
}
