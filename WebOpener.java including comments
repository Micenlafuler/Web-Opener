import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.net.URI;
import java.util.prefs.Preferences;

public class WebOpener {
    // Using Java Preferences API to store user settings persistently
    private static Preferences prefs = Preferences.userNodeForPackage(WebOpener.class);
    
    // Load stored hotkey and URL, or set default values if not set
    private static String defaultHotkey = prefs.get("hotkey", "F9");
    private static String defaultUrl = prefs.get("url", "https://www.google.com");

    public static void main(String[] args) {
        // Start the GUI in a separate thread for responsiveness
        SwingUtilities.invokeLater(WebOpener::createMainMenu);
        
        // Start listening for the hotkey in a separate thread
        startHotkeyListener();
    }

    /**
     * Creates the main menu window
     */
    private static void createMainMenu() {
        // Create a main frame for the application
        JFrame frame = new JFrame("Web Opener");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(300, 200);
        frame.setLayout(new FlowLayout());

        // Display a message showing the current hotkey
        JLabel label = new JLabel("Press " + defaultHotkey + " to open the webpage!");
        
        // Create a settings button
        JButton settingsButton = new JButton("Settings");
        
        // Open settings menu when the button is clicked
        settingsButton.addActionListener(e -> createSettingsMenu());

        // Add components to the frame
        frame.add(label);
        frame.add(settingsButton);
        
        // Make the window visible
        frame.setVisible(true);
    }

    /**
     * Creates the settings menu window
     */
    private static void createSettingsMenu() {
        // Create a new settings frame
        JFrame settingsFrame = new JFrame("Settings");
        settingsFrame.setSize(350, 200);
        settingsFrame.setLayout(new GridLayout(3, 2));

        // Create a label for the hotkey selection dropdown
        JLabel hotkeyLabel = new JLabel("Select Hotkey:");
        
        // Dropdown with function key options
        String[] hotkeys = {"F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F10"};
        JComboBox<String> hotkeyBox = new JComboBox<>(hotkeys);
        
        // Set the currently selected hotkey
        hotkeyBox.setSelectedItem(defaultHotkey);

        // Create a label and text field for the URL input
        JLabel urlLabel = new JLabel("Set Webpage URL:");
        JTextField urlField = new JTextField(defaultUrl);

        // Create a save button
        JButton saveButton = new JButton("Save");

        // When save button is clicked, update settings and notify the user
        saveButton.addActionListener(e -> {
            // Store new hotkey selection
            prefs.put("hotkey", (String) hotkeyBox.getSelectedItem());
            
            // Store new URL selection
            prefs.put("url", urlField.getText());

            // Show a message to inform the user that settings are saved
            JOptionPane.showMessageDialog(settingsFrame, "Settings Saved! Restart for changes.");
            
            // Close settings window
            settingsFrame.dispose();
        });

        // Add components to the settings frame
        settingsFrame.add(hotkeyLabel);
        settingsFrame.add(hotkeyBox);
        settingsFrame.add(urlLabel);
        settingsFrame.add(urlField);
        settingsFrame.add(new JLabel()); // Empty placeholder
        settingsFrame.add(saveButton);

        // Show the settings window
        settingsFrame.setVisible(true);
    }

    /**
     * Starts a background thread that listens for the hotkey and opens the webpage
     */
    private static void startHotkeyListener() {
        new Thread(() -> {
            try {
                Robot robot = new Robot(); // Allows simulating key events
                while (true) {
                    // Convert hotkey string to a key code
                    int keyCode = getKeyCode(defaultHotkey);
                    
                    // Check if the hotkey is pressed
                    if (keyCode != -1 && Toolkit.getDefaultToolkit().getLockingKeyState(keyCode)) {
                        // Open the webpage
                        openWebpage(defaultUrl);
                        
                        // Wait to prevent multiple quick triggers
                        Thread.sleep(500);
                    }
                    
                    // Small delay to reduce CPU usage
                    Thread.sleep(100);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }).start();
    }

    /**
     * Converts a function key name (e.g., "F9") into its Java KeyEvent code
     */
    private static int getKeyCode(String hotkey) {
        switch (hotkey) {
            case "F1": return KeyEvent.VK_F1;
            case "F2": return KeyEvent.VK_F2;
            case "F3": return KeyEvent.VK_F3;
            case "F4": return KeyEvent.VK_F4;
            case "F5": return KeyEvent.VK_F5;
            case "F6": return KeyEvent.VK_F6;
            case "F7": return KeyEvent.VK_F7;
            case "F8": return KeyEvent.VK_F8;
            case "F9": return KeyEvent.VK_F9;
            case "F10": return KeyEvent.VK_F10;
            default: return -1; // Return -1 if the hotkey is invalid
        }
    }

    /**
     * Opens the given URL in the system's default web browser
     */
    private static void openWebpage(String url) {
        try {
            // Open the URL in the default browser
            Desktop.getDesktop().browse(URI.create(url));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
